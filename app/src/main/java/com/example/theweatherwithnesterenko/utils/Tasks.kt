package com.example.theweatherwithnesterenko.utils

/**
 *Задание 1
Прежде, чем приступать к первому практическому заданию, надо определиться с курсовым проектом. Если всё ещё чувствуете себя неуверенно в коде, то можете пойти по более лёгкому пути и писать своё приложение «Погода» на основе примеров из урока. Или взяться за совершенно новый проект «Поиск по фильмам», для которого даются практические задания. Последний проект потребует от вас большей самостоятельности и вовлечённости.

Что это будет?
 * Погодное приложение, как в примерах на занятиях, но с вашими улучшениями или дополнениями.
 * Приложение для поиска фильмов, по которому вам будут даваться все практические задания.
Выбор за вами!

1. Создать новый проект в Android Studio без поддержки Kotlin.
2. Сконфигурировать Kotlin в новом проекте (лучше вручную).
3. Перевести MainActivity на Kotlin.
4. Добавить кнопку в разметку и повесить на неё clickListener в Activity.
5. Потренироваться в создании классов и функций, описанных в уроке, и убедиться, что всё работает. Например, создать тестовое приложение:
a. Сформировать data class с двумя свойствами и вывести их на экран приложения.
b. Создать Object. В Object вызвать copy и вывести значения скопированного класса на экран.
c. Вывести значения из разных циклов в консоль, используя примеры из методических материалов.
6. Изучить API погоды «Яндекса», посмотреть примеры и зарегистрироваться в качестве разработчика, получить свой ключ разработчика.
7. Изучить API базы данных с фильмами и зарегистрироваться в качестве разработчика, получить свой ключ разработчика.
8. Определиться с экранами и инструментарием своего будущего приложения с фильмами на основе возможностей API.
Задача для дополнительного обучения
Переведите проект с заметками на Kotlin. Курс «Базовый уровень».
Дополнительные материалы
Официальная документация Google
Дмитрий Жемеров, Светлана Исакова «Kotlin в действии»
Упражнения по Kotlin Koans
Статья The one and only object

Андрей Нестеренко・Преподаватель
Здравствуйте, Роман!
Страшно представить, как вы его удалили,
там же 10 раз спрашивают - уверены ли вы

Склейка строк - правильная, data класс есть
к слову, можно еще вот так копировать, если хотите что-то изменить
val user1 = MyUsers("Иванов", "Ваня")
val user2 = user1.copy(Family = "Петров")
то есть ваш код
val data = Data(1, 1, 1)
val data2 = data.copy()
data2.age = 100

в идеале выглядел бы вот так
val data = Data(1, 1, 1)
val data2 = data.copy(age = 100)
 */

/**
 *Задание 2
К этому времени вы уже должны были определиться со своим курсовым проектом. Что это будет?
1. Погодное приложение, как в примерах на занятиях, но с вашими улучшениями или дополнениями.
2. Приложение для поиска фильмов, по которому вам будут даваться все практические задания.
С этого занятия все практические задания относятся к приложению для поиска фильмов.
Если вы выбрали проект погодного приложения, которое описывается на занятии, то потребуется добавить собственные улучшения и оптимизации. Потребуется больше внимания уделять задачам для дополнительного обучения, так как код приложения у вас уже есть.
Вы уже изучили API базы данных с фильмами и примерно представляете, каким будет приложение. Создайте проект вашего приложения. Скриншот ниже даётся в качестве возможного примера. Картинки можно не отображать, мы научимся скачивать их в ближайшее время, а в остальном — заполните всё заглушками. Массивы и коллекции применять необязательно, о них мы поговорим на следующем занятии. Главная задача — выстроить архитектуру MVVM для будущего приложения, создать заглушки для экранов и переходы между ними.

Задача для самостоятельного изучения
1. Воспользуйтесь ViewBinding в своём проекте.
2. Добавьте в приложение рандомизатор, который будет возвращать разный результат загрузки данных: успех или ошибку. Обработайте ошибки загрузки.
Дополнительные материалы
Статья «Паттерны разработки»
Статья «Различия MVVM и других паттернов»
Статья «Архитектурные компоненты в деталях»
Статья «Создание ViewModel с конструктором»
Статья «Сохранение состояния приложения»
Статья «LiveData и трансформации»
Роберт Мартин «Чистая архитектура. Искусство разработки программного обеспечения»
Для слушателей факультета Android есть прекрасный факультатив «Чистая архитектура в разработке под Android», на котором разбирается подход к чистой архитектуре и к имплементации MVVM в частности. Посмотрите его после курса Material Design или «Популярные библиотеки».


Андрей Нестеренко・Преподаватель
Здравствуйте, Роман!

Вижу, вы сразу и байндинги занулили -отличная работа!

правда что мне тут проверять тогда, особенно после вашей части "рефакторинг" =)

единственную мелочь нашел лишний вызов
data.weatherData.city.name.toString()
тут toString() вы применяете к String

и в MainViewModel у вас остались неиспользуемые импорты,
такие вещи мы легко чистим комбинацией ctrl+alt+O
 */

/**
 *Задание 3
1. Добавьте экран с описанием конкретного фильма по аналогии с погодным приложением.
2. Задача для самостоятельного изучения: добавьте несколько горизонтальных списков для разных категорий фильмов.
Дополнительные материалы
Коллекции
Дженерики в Kotlin и Java

Андрей Нестеренко・Преподаватель
Здравствуйте, Роман!

вижу что вы сделали и 4 ДЗ тоже, но не вижу чтобы вы открывали его сдачу
если я что-то упустил - сообщите об этом)
если вам нужно разрешение на открытие сдачи 4 дз, то я вам его даю

по поводу вашего коммита
"Урок 3. ДЗ на преварительную оценку."

в свете последний правил, теперь вам остается только обращаться ко мне в ЛС тут или в телеграмм, чтобы получить "предварительную" оценку =)

по поводу //todo DiffUtil - не откладывайте)
Имейте ввиду, что когда у вас начнут приходить данные с сервера, где значения если и будут меняться, то редко
обновление адаптера(ваш WeatherListAdapter строка19) notifyDataSetChanged нужно будет переделать на notifyItemChanged() или notifyItemRangeChanged()
ведь notifyDataSetChanged - подразумевает обновление ВСЕГО списка сразу, что может быть ресурсозатратным и "фризить" приложение

Вот этот вот блок кода
val myObserver = object : Observer<AppState> {
override fun onChanged(data: AppState) {
doRenderDataAtWeatherListFragment(data)
}
}

мечтает стать красивой лямбдой в 4 уроке
val myObserver = Observer<AppState> { data -> doRenderDataAtWeatherListFragment(data) }

initRecycleView() //FIXME правильно сделал?
=))))
да, даже ради одной строки - да
кто знает, может в будущем нужно будет добавить доп настроек кучу, а вы уже будете готовы
 */

/**
 *Урок 4. Функции высшего порядка, лямбды и extension-функции
Задание 4
1. Проведите рефакторинг вашего приложения в соответствии с полученными знаниями о возможностях языка и хорошими практиками программирования на Kotlin.
2. Напишите дополнительные extension-функции для Snackbar без action, а также такие, что принимают строковые ресурсы (R.string...) в качестве текста.
Задача для самостоятельного изучения
Изучите тему делегатов и делегирования более подробно.

Дополнительные материалы
Coding convention
Функциональное программирование
Функции-расширения
Функции-расширения

Андрей Нестеренко・Преподаватель
Здравствуйте, Роман!

не увидел extension-функцию для Snackbar
если вам это показалось трудным, то я бы вот так сделал, например

private fun View.withAction(
text: String,
actionText: String,
action: (View) -> Unit,
length: Int = Snackbar.LENGTH_INDEFINITE
) {
Snackbar.make(this, text, length).setAction(actionText, action).show()
}
и потом выхов в любом месте
binding.что-то там.withAction(getString(R.string.error),
getString(R.string.try_again),
{ sentRequest() },
Snackbar.LENGTH_LONG)

Вы прямо рекордсмен группы
насчитал
2- let
помним, что это лучший способ потокобезопасно работать с объектом, убедившись что он не null (конструкция? let{})
7- apply
помним, что эта функция довольно популярна у котлин разработчиков, когда нужно создать объект, и тут же его настроить
7- with (тоже люблю эту функцию).
Так не только удобно работать с объектом как с его ресивером, но и четко определяет часть кода, связанную именно с обработкой объекта, к которому мы применили with. Хоть With и может возвращать результат лямбды, но обычно мы не подразумеваем никакого возврата из этого блока {})
2- also (да, с it возиться не всегда удобно)
2– run (когда что-то происходит в одном потоке, и не хочется возиться с it- почему бы и нет)
функции области видимости- приняты =)
 */

/**
 *Урок 5. Выходим в интернет
Задание 5
Получайте данные с сервера The Movie DataBase. Постеры фильмов мы научимся грузить на следующих уроках — можете оставить для них заглушки.

Дополнительные задачи:
1. Вынесите бизнес-логику, то есть запрос на сервер и парсинг данных, в отдельный класс. Фрагменты должны запрашивать только данные о фильмах и получать их из класса, занимающегося загрузкой.
2. Обрабатывайте ошибки запроса и парсинга данных: отображайте экран с ошибкой, или диалоговое окно, или Snackbar.
Дополнительные материалы
Подробнее о WebView
Gson — Quick Guide
Статья «Gson или «Туда и Обратно»»
Статья «Обзор Gson: работаем с JSON в Java»
Статья «Простым языком об HTTP»

Андрей Нестеренко・Преподаватель
//FIXME везде пишут про try-catch-finally.
// Можно ли закрывать соединение просто вот так, не в блоке finally?

можно, но это приведет к тому, что любая ошибка чтения ответа сервера, или ошибка парсинга ответа в weatherDTO приведет к тому что приложение закроется с ошибкой - это раздражает пользователя
лучше поймать проблему, показать предупреждение "что-то пошло не так", и предложить обратиться в поддержку

а блок finally {
urlConnection.disconnect()
}
нужен для избежания утечек памяти и висящих открытых подключений

супер здорово, что вы работали с 212.86.114.27, отличная работа!
 */

/**
 * Задание 6
1. Подпишитесь на событие изменения связи (CONNECTIVITY_ACTION) и уведомляйте об этом пользователя.
2. Переведите хотя бы один экран своего приложения на использование связки «сервис + BroadcastReceiver» для получения данных из интернета.
Важно! Если разрабатываете приложение на основе Яндекс API, то при получении ключа разработчика может потребоваться подождать 15–30 минут, прежде чем ваш ключ активируется, и вы сможете отправлять запросы на сервер Яндекса. Пока ключ не активируется, сервер продолжит возвращать forbidden на все запросы.

Задача для самостоятельного изучения
Создайте два разных приложения и передавайте между ними данные или создайте привязанный сервис, как это описывается в факультативе.

Дополнительные материалы
HandlerThread
Thread
Сервисы
События ОС
Workmanager

Андрей Нестеренко・Преподаватель
//FIXME кажется неправильно сделал(( В манифесте константу не вижу
в манифест выносится через string ресурсы

//FIXME что-то не так со строчкой выше (отображает цифры вместо текста)
нужно использовать
textView1.text = "${resources.getString(R.string.it_was_working_for)} $time ${resources.getString(R.string.sec)}"
вместо
textView1.text = "${R.string.it_was_working_for} $time ${R.string.sec}"

//FIXME оставить lateinit или theThread.theHandler?????.post (как на уроке было). Как лучше?
мне больше нравится lateinit - не критично

val serverside = 500..100000 //FIXME хде предел?
исходя из логики подхода - 599 =)
но бывают ошибки и 1114, как крипоский на уроке нам пример приводил
это все условности, не принимайте близко

//FIXME не могу разобраться с callback
у вас есть private val onErrorListener: OnServerResponseListener
в чем проблема сделать все в точности так же как и в
private val onServerResponseListener: OnServerResponse ?

если возникают проблема такого плана, то "не могу разобраться " - это не наш путь
наш путь - в ЛС мне присылаете код и вопрос - сделал это и это, не работает как я хочу

override fun onError(error: ResponseState) {
//FIXME не разобрался с этим способом вывода ошибки
}
какие трудности возникают с тем, чтобы повторить 1 в 1
override fun onResponse(weatherDTO: WeatherDTO) {
renderData(weatherDTO)
}
?
давайте вместе разберемся

val headers = urlConnection.headerFields //FIXME забыл, зачем это нужно((
мы хотели посмотреть заголовки ответа)
вы ведь могли пересмотреть эту часть урока?))))

//FIXME почему блок when отказался работать без блока else? В WeatherLoader работает без него.
потому что в WeatherLoader используется sealed класс, там не может быть ветки else в принципе
это было на 2-3 занятиях

notifyItemRangeChanged(0, 10, Weather())
зачем Weather() здесь?
почему 10? я бы написал вот так лучше
notifyItemRangeChanged(0, data.size)

//FIXME применение with тут не лишнее? Чую, что лишнее, а объяснить не могу толком.
внунтри этого блока очень много работы с чуждыми binding вещами, так что в самом деле - спорно
но не критично

// putExtra(KEY_1, "${R.string.hallo_from_activity}") // передаём строку в сервис //FIXME передаётся int
выше ответил на подобный вопрос
 */

/**
 * Урок 7. Получение данных и загрузка изображений
Задание 7
1. Используйте Retrofit для получения данных с сервера.
2. Используйте Glide или Picasso для загрузки изображений.
Следующий урок посвящён работе с базой данных. Если у вас есть доступ к курсу «Базы данных. Интерактивный курс», рекомендуем освежить в памяти материал.

Задачи для самостоятельного изучения
1. Передача данных не идеальна. WeatherDTO переводится в список из Weather, хотя список не требуется, достаточно одного объекта Weather. Подумайте, как оптимизировать этот код.
2. Используйте библиотеку Coil в качестве загрузчика изображений.
3. Добавьте в своё приложение возможность загружать SVG, если требуется.
Дополнительные материалы
Gson
Документация по Retrofit
Конвертируем время
Документация Picasso
Документация GlideToVectorYou

Андрей Нестеренко・Преподаватель
Здравствуйте, Роман!
• У вас сейчас апри каждом вызове
getWeatherDetails
пересоздается экземпляр ретрофит клиента, хотелось бы этого избежать, например, путем выноса его за
пределы getWeatherDetails в какую-то внутреннюю переменную репозитория.
Или вообще на уровень приложения MyApp или как там у нас было на уроке( класс наследующий Application)

• Для функции load (речь про coil) мы можем указывать, что делать в случае ошибки загрузки error,
и чем скрасить ожидание placeholder
binding.ivHeader.load("https://freepngimg.com/thumb/city/36275-3-city-hd.png"){
placeholder(R.drawable.ic_russia)
error(R.drawable.ic_earth)
}
это позволяет вашему приложению выглядеть более живым для пользователя, что ли
 */

/**
 * Задание 8
1. Поиск по фильмам возвращает в том числе и «взрослый контент». Это параметр adult в ответе сервера. Создайте экран с настройками или чекбокс в меню приложения и добавьте туда настройку «включение — выключение» взрослого контента. Зафиксируйте эту настройку в SharedPreferences.
2. Добавьте возможность оставлять заметку о просмотренном фильме, чтобы сохранять её в базе данных.
3. Создайте БД для вашего приложения и храните там историю запросов: сведения о фильмах, время просмотра, заметку о фильме.
4. Выполняйте запросы в БД асинхронно (в рабочем потоке).
Задача для самостоятельного изучения
Добавьте возможность сохранять фильмы в список понравившихся. Это будет отдельный экран, в котором можно будет загружать список понравившихся фильмов.
Дополнительные материалы
Room: один ко многим
Room
Entity
DAO
ResultsAPI

Андрей Нестеренко・Преподаватель
Здравствуйте, Роман!
заглушки это здорово, я бы даже сказал - наше все
но вот эта штука
private fun isInternet(): Boolean { //todo как-то переписать эту функцию
// заглушка
return false
}
мешала мне проверять ваше ДЗ)
в БД ничего не добавлялось

держите такие вещи в голове, если что-то включили в качестве теста, обязательно верните назад)
а лучше внимательно впитайте урок 12, там мы будем изучать различные сборки, и все "тестовые фичи" добавляйте в сборку debug

С БД все отлично, забыли только убрать
.allowMainThreadQueries() // todo HW FOR CHEATERS ONLY

ну, там не сложно, на самом деле =)
напомните показать на уроке, если забуду

• А что с пунктом использования SharedPreferences для запоминаниятекущего выбора городов РФ/Мир?
Решается же в одну строку на чтение

isRussian = requireActivity().getSharedPreferences(Settings.SHARED_PREF, Context.MODE_PRIVATE)
.getBoolean(Settings.SETTING_RUS, Settings.settingRus)

и запись (тут пару рутинных строк кода)
на каждый клик по FAB кнопке открываем эдитор
val sharedPreferences =
requireActivity().getSharedPreferences(Settings.SHARED_PREF, Context.MODE_PRIVATE)
val editor = sharedPreferences.edit()
записываем текущее значение
editor.putBoolean(Settings.SETTING_RUS, <true/false – зависит от текущего состояния>)
и сохраняем изменение
editor.apply()
Готово!

• у вас по клику на кнопку истории накапливаются фрагменты в backstack
просто попробуйте много раз кликнуть на кнопку история (у вас там иконка) и потом нажать назад – поймете, о чем я

решается очень просто, вспоминаем базовый курс,
проверяем, нет ли нашего фрагмента уже в BackStack

val fragmentA = supportFragmentManager.findFragmentByTag("tag")

если нет, то добавляем
if (fragmentA==null) {
supportFragmentManager.apply {
beginTransaction()
.replace(R.id.container, CityHistoryListFragment.newInstance(), "tag")
.addToBackStack("")
.commit()
}
}
Вот и все решение.
Теперь только один HistoryWeatherListFragment может поместиться в BackStack, сколько бы раз вы не на жали на кнопку истории
 */

/**
 * Задание 9
Добавьте экран со списком контактов в своё приложение.
Задачи для самостоятельного изучения
1. Добавьте фильтры для главного экрана или истории просмотра, чтобы фильтровать содержимое списков.
2. Добавьте возможность позвонить по номеру из списка контактов.

Андрей Нестеренко・Преподаватель
теперь понял, почему вы с таким трудом продвигались)

ну, то что вы полностью разобралиьс с контент провайдером( единственный в группе) - это хорошо
но как бы и не требовалось)
достаточно было просто понять, что такое есть

в любом случае, не помешает, главное не надрываться

По поводу ДЗ
Вы повторили то, что мы делали на уроке.
А хотелось бы в добавок увидеть еще и
получение номеров телефона, присмотритесь к этой функции
private fun getNumberFromID(cr: ContentResolver, contactId: String) :String {
val phones = cr.query(
ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null,
ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " = " + contactId, null, null
)
var number: String = "none"
phones?.let { cursor ->
while (cursor.moveToNext()) {
number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER))
}
}
return number
}

• и самого звонка
• private fun makeCall(number: String) {
if(ContextCompat.checkSelfPermission(
requireContext(),
Manifest.permission.CALL_PHONE
) == PackageManager.PERMISSION_GRANTED){
val intent = Intent(Intent.ACTION_CALL, Uri.parse("tel:$number"))
startActivity(intent)
}else{
requestPermissions(arrayOf(Manifest.permission.CALL_PHONE), 1)
}
}

Все это доступно описано во фрагменте ContactsBeginnersFragment (а если вам интересно углубленное
понимание процессов, то обратите внимание на ContactsAdvancedFragment)
моей шпаргалки к 9 ДЗ
https://github.com/mentatusn/Lesson9_kotlin_PICK_CONTACT_AND_CALL
 */

/**
 * Задание 10
1. Добавьте в своё приложение экран с картой, поиском по адресу и отображением адреса по координатам.

Задание для самостоятельного изучения
Добавьте кинотеатры вашего города в геозоны и отображайте диалоговое окно при вхождении в неё.
Дополнительные материалы
С чего начать
Возможности класса GoogleMap
Альтернатива картам Google
Select Current Place and Show Details on a Map
Маршруты на картах Google в Android-приложении — некоторые уточнения
Работа с геозонами (geofences) в Android. Обновление
com.google.android.gms.maps.model
com.google.android.gms.location
Directions API: Overview
 */

/**
 * Задание 11
Добавьте в ваше приложение возможность получения push-уведомлений.
Задания для самостоятельного изучения
Изучите Channels и их свойства.
Дополнительные материалы
Нотификации
Личный кабинет
Notification Channels
Topic messaging
Device groups
Upstream
 */

/**
 * Задание 12
1. Вынесите в файл properties пароли для подписанного приложения
2. Создайте ещё одну версию приложения
3. Проверьте свой код на принципы KISS, DRY, YAGNI
Задания для самостоятельного изучения
Выложите ваше приложение в магазин приложений
Дополнительные материалы
Фоновое выполнение
Billing
Google Play
Разница между build types и flavors
Dimensions
 */